/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.passwordkeeper.forms;

import com.passwordkeeper.classes.AlgorithmAES;
import org.xml.sax.SAXException;

import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

/**
 *
 * @author Cargamoni
 */
public class PasswordFrame extends JFrame {

    /**
     * Creates new form PasswordsFrame
     */
    AlgorithmAES FromClass;
    int CategoryNum = 0;
    public PasswordFrame() throws ParserConfigurationException, SAXException, IOException {
        initComponents();
    }

    public PasswordFrame(AlgorithmAES AesClass, int CategoryID) throws ParserConfigurationException, SAXException, IOException {
        FromClass = AesClass;
        CategoryNum = CategoryID;
        initComponents();
    }

    public DefaultListModel PasswordModel() throws IOException, SAXException, ParserConfigurationException
    {
        DefaultListModel model = new DefaultListModel();
        String[] strings = FromClass.CategoryPasswordsReturner(CategoryNum);
        for(int i = 0; i < strings.length; i++)
            model.addElement(strings[i]);
        return model;
    }

    /*
    Experimental
     */

    private JRadioButtonMenuItem items[]; // holds items for colors
    String menuItems[] = { "Copy Selected Password","Modify Password","Delete Password" };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() throws IOException, SAXException, ParserConfigurationException {

        jPopupMenu1 = new JPopupMenu();
        jScrollPane1 = new JScrollPane();
        jList1 = new JList<>();
        jButton1 = new JButton();

        this.setTitle(FromClass.GetCategoryNameFromID(CategoryNum) + " Category Password List");

        setResizable(false);
        // Kapatıldığında bir önceki frame'e dönmesini sağlar.
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {
                JFrame frame = (JFrame)e.getSource();
                frame.setVisible(false);
                CategoryFrame newFrame = null;
                try {
                    newFrame = new CategoryFrame(FromClass);
                } catch (ParserConfigurationException parserConfigurationException) {
                    parserConfigurationException.printStackTrace();
                } catch (SAXException saxException) {
                    saxException.printStackTrace();
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
                newFrame.setVisible(true);
            }
        });

        jList1.setModel(PasswordModel());
//        jList1.setModel(new AbstractListModel<String>() {
//            String[] strings = FromClass.CategoryPasswordsReturner(CategoryNum);
//            public int getSize() { return strings.length; }
//            public String getElementAt(int i) { return strings[i]; }
//        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Go Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton1ActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (SAXException e) {
                    e.printStackTrace();
                } catch (ParserConfigurationException e) {
                    e.printStackTrace();
                }
            }});

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jButton1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                ).addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 304, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();

        //Ekranın ortasında çıkması için
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int xLoc = (dim.width/2-this.getSize().width/2);
        int yLoc = (dim.height/2)-this.getSize().height/2;
        this.setLocation(xLoc,yLoc);

    /*
    Experimental
     */
        // Popuplist için event handler
        // Butonlar için Icon bulunacak !
        ItemHandler handler = new ItemHandler();
        ButtonGroup bntGroup = new ButtonGroup();
        items = new JRadioButtonMenuItem[menuItems.length];

        for (int i = 0; i < items.length; i++)
        {
            if(i == items.length -1)
                jPopupMenu1.addSeparator();
            items[i] = new JRadioButtonMenuItem(menuItems[i]);
            jPopupMenu1.add(items[i]);
            bntGroup.add(items[i]);
            items[i].addActionListener(handler);
        }

        jList1.addMouseListener(new MouseAdapter()
             {
                 public void mousePressed(MouseEvent event) { checkForTriggerEvent(event); }
                 public void mouseReleased(MouseEvent event) { checkForTriggerEvent(event); }
                 private void checkForTriggerEvent(MouseEvent event) {
                     if (event.isPopupTrigger()) jPopupMenu1.show(event.getComponent(), event.getX(), event.getY());
                 }
             }
        );

    /*
    Experimental Ending
     */


    }// </editor-fold>//GEN-END:initComponents

    /*
     Experimental
     */

    // Popup menü elemanlarına tıklandığı zaman neyin yapılacağının belirleneceği bölüm !
    private class ItemHandler implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            for (int i = 0; i < items.length; i++) {
                if (event.getSource() == items[i]) {
                    //getContentPane().setBackground(colorValues[i]);
                    try {
                        if(i == 0)
                        {
                            if(!jList1.isSelectionEmpty())
                            {
                                FromClass.CopyPasswordToClipBoard(CategoryNum, jList1.getSelectedIndex());
                                JOptionPane.showMessageDialog(null, jList1.getSelectedValue() + " Password Copied to Clipboard, use Ctrl+V for paste", "Success", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        else if (i == 2)
                        {
                            if(!jList1.isSelectionEmpty())
                            {
                                FromClass.DeleteThisPassword(CategoryNum, jList1.getSelectedIndex());
                                JOptionPane.showMessageDialog(null, jList1.getSelectedValue() + " Password Deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
                                jList1.setModel(PasswordModel());
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (SAXException e) {
                        e.printStackTrace();
                    } catch (ParserConfigurationException e) {
                        e.printStackTrace();
                    }
                    return;
                }
            }
        }
    }
            /*
     Experimental
     */

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException, SAXException, ParserConfigurationException {
        CategoryFrame GoBackToCategory = new CategoryFrame(FromClass);
        setVisible(false);
        GoBackToCategory.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PasswordFrame().setVisible(true);
                } catch (ParserConfigurationException e) {
                    e.printStackTrace();
                } catch (SAXException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JList<String> jList1;
    private JPopupMenu jPopupMenu1;
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
